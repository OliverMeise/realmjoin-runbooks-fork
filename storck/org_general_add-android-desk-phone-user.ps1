<#
  .SYNOPSIS
  Create a new user account for Android Desk Phones.

  .DESCRIPTION
  Create a new user account for Android Desk Phones. 

  .PARAMETER UserPrincipalName
  User principal name. (Mandatory)

  .PARAMETER DisplayName
  Display Name. (Mandatory)

  .PARAMETER BusinessPhone
  Telephone number, e.g. "+49 5201 12 xxxx"

  .PARAMETER Country
  Country, e.g. "Germany", "Spain"

  .PARAMETER UsageLocation
  Usage location, e.g. "DE", "ES"

  .PARAMETER EmployeeType
  Employee Type. Usually "0" for phone user accounts.

  .PARAMETER InitialPassword
  Password will be autogenerated if left empty.

  .PARAMETER DefaultGroups
  Groups to assign to the user. Please provide a comma separated list of group display names.

  .PARAMETER AdminUnitId
  Object ID of an administrative unit. The user will be added to this unit after creation.

  .PARAMETER CallerName
  User principal name of the caller of this runbook.

  .NOTES

  .EXAMPLE

  .INPUTS

#>

#Requires -Modules @{ModuleName = "RealmJoin.RunbookHelper"; ModuleVersion = "0.8.3" }, ExchangeOnlineManagement

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
param (
    [Parameter(Mandatory = $true)]
    [string]$UserPrincipalName,
    [Parameter(Mandatory = $true)]
    [string]$DisplayName,
    [string]$BusinessPhone,
    [string]$Country='Germany',
    [string]$UsageLocation='DE',
    [string]$InitialPassword = '',
    [string]$EmployeeType = 'Phone-Ressource',
    [string]$ExtensionAttribute9='True',
    [string]$DefaultGroups = 'License-TeamsSharedDevices',
    [string]$AdminUnitId='bb60d016-6614-40db-97f6-a0c834827570',
    [Parameter(Mandatory = $true)]
    [string]$CallerName     # CallerName is tracked purely for auditing purposes
)
try {
$ErrorActionPreference = "SilentlyContinue"
    $UserPrincipalName
    $DisplayName
    $BusinessPhone
    $Country
    $UsageLocation
    $InitialPassword
    $EmployeeType
    $ExtensionAttribute9
    $DefaultGroups
    $AdminUnitId
Write-RjRbLog -Message "Caller: '$CallerName'" -Verbose

Connect-RjRbGraph
#Invoke-RjRbRestMethodGraph -Resource "/users/$UserPrincipalName" -Method DELETE

if ($null -ne $UserObject) {
    throw ("Username $UserPrincipalName is already taken.")
}

if ($InitialPassword -like '') {
    $InitialPassword='Desk{0}Phone!' -f (Get-Random -Minimum 10000 -Maximum 99999)
}

$NewUserArgs = [ordered]@{
    '@odata.type' = '#Microsoft.Graph.User'
    'userPrincipalName' = $UserPrincipalName
    'mailNickName' = $UserPrincipalName.Split('@')[0]
    'displayName' = $DisplayName
    'accountEnabled' = $true
    'onPremisesExtensionAttributes' = @{
        'extensionAttribute9' = $ExtensionAttribute9
    }
    'passwordProfile' = @{
        'forceChangePasswordNextSignIn' = $false
        'password' = $InitialPassword
    }
}
if ($BusinessPhone) {
    $NewUserArgs['businessPhones']=@($BusinessPhone)
}

if ($Country) {
    $newUserArgs['country']=$Country
}

if ($UsageLocation) {
    $newUserArgs['usageLocation']=$UsageLocation
}

if ($EmployeeType) {
    $newUserArgs['employeeType']=$EmployeeType
}

Write-Output ('## Creating user object "{0}"' -f $UserPrincipalName)
$UserObject = Invoke-RjRbRestMethodGraph -Resource "/users" -Method POST -Body $NewUserArgs

if ($UserObject) {
    Write-Output ('## Adding user object to administrative unit "{0}"' -f $AdminUnitId)
    $Resource='/directory/administrativeUnits/{0}/members/$ref' -f $AdminUnitId
    $Body=@{
        '@odata.id'='https://graph.microsoft.com/v1.0/users/{0}' -f $UserPrincipalName
    }
    Invoke-RjRbRestMethodGraph -Resource $Resource -Method POST -Body $Body -ErrorAction $ErrorActionPreference
} else {
    throw ('user object does not exist')
}

# Assign the given groups. Continue even if this fails.
$groupsArray = $DefaultGroups.split(',').Trim()
foreach ($groupname in $groupsArray) {
    if ($groupname -ne '') {
        #"Searching default group $groupname."
        $group = Invoke-RjRbRestMethodGraph -Resource "/groups" -OdFilter "displayName eq '$groupname'" -ErrorAction SilentlyContinue
        if (-not $group) {
            "## Group '$groupname' not found!" 
            Write-Error "Group '$groupname' not found!"
        } else {
            if (($group.GroupTypes -contains "Unified") -or (-not $group.MailEnabled)) {
                "## Adding to group '$($group.displayName)'"
                $body = @{
                    "@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$($userObject.id)"
                }
                try {
                    $Resource='/groups/{0}/members/$ref' -f $group.id
                    Invoke-RjRbRestMethodGraph -Resource $Resource -Method Post -Body $body | Out-Null
                    #"## '$($group.displayName)' is assigned to '$UserPrincipalName'"
                }
                catch {
                    "## ... failed. Skipping '$($group.displayName)'. See Errorlog."
                    Write-RjRbLog $_
                }
            }
        }
    }
}

if ($UserObject -ne $null) {
    Write-Output ('## User "{0}" successfully created.' -f $UserPrincipalName)
    Write-Output ('## Initial Password: {0}' -f $InitialPassword)
}
}
catch {
    $_.Exception.Message
    $_.InvocationInfo.ScriptLineNumber
}
